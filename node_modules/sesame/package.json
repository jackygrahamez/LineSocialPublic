{
  "name": "sesame",
  "version": "0.1.2",
  "description": "Session middleware for lazy people.",
  "main": "./index.js",
  "repository": {
    "type": "git",
    "url": "http://github.com/substack/node-sesame.git"
  },
  "dependencies": {
    "uuid-pure": ">=1.0.3",
    "resware": ">=0.0.4",
    "connect": ">=1.0.0",
    "hashish": ">=0.0.2",
    "node-proxy": ">=0.3.2"
  },
  "devDependencies": {
    "supermarket": ">=1.1.2",
    "chaos": ">=0.1.7",
    "nStore": ">=0.2.1"
  },
  "keywords": [
    "sessions",
    "web",
    "cookies",
    "http"
  ],
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "license": "MIT/X11",
  "engine": [
    "node >=0.2.0"
  ],
  "readme": "sesame\n======\n\nSesame is a session middleware for express/connect for amazingly simple\nsessions. To update sessions, just modify `req.session`.\n\nexample\n=======\n\n    var connect = require('connect');\n    var webserver = connect.createServer();\n    webserver.use(require('sesame')());\n    \n    webserver.use(connect.router(function (app) {\n        app.get('/', function (req, res) {\n            req.session.times = (req.session.times || 0) + 1;\n            \n            res.writeHead(200, { 'Content-Type' : 'text/plain' });\n            res.end(req.session.times + ' times!');\n        });\n    }));\n    \n    console.log('Listening on 9090');\n    webserver.listen(9090);\n\nRun this program and it will repeatedly increment a counter. Woo!\nHowever!\n\nWhen you restart the above server or when it crashes you'll lose all of your\nsessions! Never fear, with sesame it's super easy to persist sessions across\nrestarts! Just swap out\n\n    webserver.use(require('sesame')());\n\nwith this to use nStore:\n\n    webserver.use(require('sesame')({\n        store : require('nStore')(__dirname + '/nstore.db')\n    }));\n\nor if you want to use [supermarket](https://github.com/pkrumins/node-supermarket):\n\n    webserver.use(require('sesame')({ \n        store : new(require('supermarket'))({\n            filename : __dirname + '/supermarket.db', json : true,\n        })\n    }));\n\nor if you'd like to use [chaos](https://github.com/stagas/chaos)\n\n    webserver.use(require('sesame')({\n        store : require('chaos')(__dirname + '/chaos.db').mount('sessions')\n    }));\n\nIf your favorite database backend isn't listed you should send me a pull\nrequest!\n\nCheck out\n[the examples/ directory](https://github.com/substack/node-sesame/tree/master/examples)\nfor more examples.\n\nusage\n=====\n\nsesame(options)\n---------------\n\nOptions can be:\n\n* store - the storage engine to use\n\n* cookieName - the cookie name to use, defaults to `session_id`\n\n* sessions - the sessions to start with if you'd rather load them yourself\n\nrequests\n--------\n\nSesame adds `session`, `sessions`, and `sessionID` to the `req` object.\nYou can modify `req.sessions[req.sessionID]` just the same as `req.session`.\n\nIf you assign a new value to `req.session` like this:\n\n    req.session = { x : 55 };\n\nit will also just work, even when using a persistent store.\n\n\nTo empty the `session`, just do:\n\n    req.session = {}\n\nEasy!\n\nthe secret sauce\n================\n\nWait a moment! How can you just throw a database at this AND modify deeply\nnested elements in `req.session`, you may be asking yourself?\n\nUnder the hood, harmony proxies trap updates to the `req.session` object to keep\nthe sessions on disk in sync with the in-memory sessions.\n",
  "readmeFilename": "README.markdown",
  "bugs": {
    "url": "https://github.com/substack/node-sesame/issues"
  },
  "_id": "sesame@0.1.2",
  "_from": "sesame@"
}
